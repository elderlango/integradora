{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { BarChart } from 'react-native-chart-kit';\nimport styles from \"./graphicsScreen.styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport BackButton from \"../../components/backButtonc\";\nimport { ThemeContext } from \"../../components/theme/themeManager\";\nimport FontAwesome5 from \"@expo/vector-icons/FontAwesome5\";\nimport Menu from \"../../components/menu/menu\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get(\"window\").width;\nvar categories = ['TODOS', 'GAS', 'ULTRASONICO', 'TEMPERATURA', 'HUMEDAD'];\nvar categoriesIcon = ['layer-group', 'cloud', 'wave-square', 'temperature-high', 'water'];\nvar categoriesIconColor = ['#DE784E', '#A8A6AC', '#ffd128', '#FF5AA0', '#34c1fd'];\nvar categoriesColor = ['#a85c3d', '#A8A6AC', '#bca91e', '#b03d6f', '#1f8cbf'];\nvar GraphicScreen = function GraphicScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState('TODOS'),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedCategory = _useState2[0],\n    setSelectedCategory = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    graphData = _useState4[0],\n    setGraphData = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isLoading = _useState6[0],\n    setIsLoading = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    error = _useState8[0],\n    setError = _useState8[1];\n  useEffect(function () {\n    var fetchDataForSensor = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var sensorType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'TODOS';\n        setIsLoading(true);\n        setError('');\n        try {\n          var userToken = yield AsyncStorage.getItem('userToken');\n          if (!userToken) {\n            throw new Error('User token not available');\n          }\n          var headers = {\n            Authorization: `Bearer ${userToken}`\n          };\n          var endpoint = `http://${global.ipDireccion}:3000/api/devices/byAdmin`;\n          var adminDevicesResponse = yield fetch(endpoint, {\n            method: 'GET',\n            headers: headers\n          });\n          var adminDevicesData = yield adminDevicesResponse.json();\n          if (!adminDevicesResponse.ok) {\n            throw new Error(adminDevicesData.message || 'Failed to fetch devices');\n          }\n          if (adminDevicesData && adminDevicesData.length > 0) {\n            var deviceId = adminDevicesData[0]._id;\n            var mappedSensorType = '';\n            switch (sensorType.toUpperCase()) {\n              case 'GAS':\n                mappedSensorType = 'gasDetector';\n                break;\n              case 'ULTRASONICO':\n                mappedSensorType = 'ultrasonic';\n                break;\n              case 'TEMPERATURA':\n                mappedSensorType = 'temperature';\n                break;\n              case 'HUMEDAD':\n                mappedSensorType = 'humidity';\n                break;\n              default:\n                throw new Error('Tipo de sensor no reconocido: ' + sensorType);\n            }\n            var endpoint2 = `http://${global.ipDireccion}:3000/api/devices/${deviceId}/sensors/${mappedSensorType}/data`;\n            var sensorDataResponse = yield fetch(endpoint2, {\n              method: 'GET',\n              headers: headers\n            });\n            var sensorData = yield sensorDataResponse.json();\n            if (!sensorDataResponse.ok) {\n              throw new Error(sensorData.message || `Failed to fetch data for sensor: ${sensorType}`);\n            }\n            if (sensorData && sensorData.length > 0) {\n              setGraphData(function (prevData) {\n                return _objectSpread(_objectSpread({}, prevData), {}, _defineProperty({}, sensorType, sensorData));\n              });\n            } else {\n              throw new Error(`No data found for sensor: ${sensorType}`);\n            }\n          } else {\n            throw new Error('No devices found for this admin');\n          }\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setError(error.message);\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      return function fetchDataForSensor() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    if (selectedCategory === 'TODOS') {\n      global.categories.forEach(function (category) {\n        fetchDataForSensor(category);\n      });\n    } else {\n      fetchDataForSensor(selectedCategory);\n    }\n  }, [selectedCategory]);\n  var handleCategorySelect = function handleCategorySelect(category) {\n    setSelectedCategory(category);\n  };\n  var getChartData = function getChartData(sensorData, sensorType) {\n    var values;\n    switch (sensorType) {\n      case 'GAS':\n        values = sensorData.map(function (item) {\n          return item.value;\n        });\n        break;\n      case 'ULTRASONICO':\n        values = sensorData.map(function (item) {\n          return item.distance;\n        });\n        break;\n      case 'TEMPERATURA':\n        values = sensorData.map(function (item) {\n          return item.temperature;\n        });\n        break;\n      case 'HUMEDAD':\n        values = sensorData.map(function (item) {\n          return item.humidity;\n        });\n        break;\n      default:\n        values = [];\n    }\n    return {\n      labels: sensorData ? sensorData.map(function (item) {\n        return new Date(item.timestamp).toLocaleTimeString();\n      }) : [],\n      datasets: [{\n        data: values\n      }],\n      legend: [\"Sensor Data\"]\n    };\n  };\n  var chartConfig = {\n    backgroundGradientFrom: theme === 'light' ? \"#F7F6FA\" : \"#202124\",\n    backgroundGradientTo: theme === 'light' ? \"#F7F6FA\" : \"#202124\",\n    decimalPlaces: 2,\n    barPercentage: 0.5,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return `rgba(0, 0, 0, ${opacity})`;\n    },\n    labelColor: function labelColor() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return `rgba(0, 0, 0, ${opacity})`;\n    },\n    propsForLabels: {\n      rotation: '0',\n      fontSize: \"14\"\n    },\n    formatXLabel: function formatXLabel(label, index, labels) {\n      var interval = 1;\n      return index % interval === 0 ? label : '';\n    }\n  };\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  var dark = '../../assets/images/tile_background4.png';\n  var light = '../../assets/images/tile_background9.png';\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    menuVisible = _useState10[0],\n    setMenuVisible = _useState10[1];\n  var menuPosition = useRef(new Animated.ValueXY()).current;\n  var panResponder = useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderMove: function onPanResponderMove(event, gesture) {\n      menuPosition.setValue({\n        x: gesture.dx,\n        y: gesture.dy\n      });\n    },\n    onPanResponderRelease: function onPanResponderRelease(event, gesture) {\n      if (gesture.dx > 50) {\n        setMenuVisible(true);\n      } else {\n        setMenuVisible(false);\n      }\n      Animated.spring(menuPosition, {\n        toValue: {\n          x: 0,\n          y: 0\n        },\n        useNativeDriver: false\n      }).start();\n    }\n  })).current;\n  return _jsx(SafeAreaView, {\n    style: _objectSpread(_objectSpread({}, styles.backgroundImage), styles.container),\n    children: _jsxs(ImageBackground, {\n      source: theme === 'light' ? require(light) : require(dark),\n      style: _objectSpread(_objectSpread({}, styles.backgroundImage), styles.container),\n      children: [_jsxs(View, _objectSpread(_objectSpread({\n        style: styles.headerContainer\n      }, panResponder.panHandlers), {}, {\n        children: [_jsx(View, {\n          style: styles.headerContainer,\n          children: _jsx(Text, {\n            style: styles.headerTitle,\n            children: \"Gr\\xE1ficas de Sensores\"\n          })\n        }), _jsx(BackButton, {\n          navigation: navigation\n        })]\n      })), menuVisible && _jsx(Menu, {\n        navigation: navigation,\n        style: menuPosition.getLayout(),\n        onClose: function onClose(isVisible) {\n          return setMenuVisible(isVisible);\n        }\n      }), _jsx(ScrollView, {\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        contentContainerStyle: styles.categoriesContainer,\n        children: categories.map(function (category) {\n          var iconName = categoriesIcon[categories.indexOf(category)];\n          var iconColor = categoriesIconColor[categories.indexOf(category)];\n          return _jsxs(TouchableOpacity, {\n            onPress: function onPress() {\n              return handleCategorySelect(category);\n            },\n            style: [styles.categoryButton, selectedCategory === category && _objectSpread(_objectSpread({}, styles.categoryButtonSelected), {}, {\n              borderBottomColor: iconColor\n            })],\n            children: [_jsx(Text, {\n              style: [styles.categoryButtonText, selectedCategory === category && _objectSpread(_objectSpread({}, styles.categoryButtonTextSelected), {}, {\n                color: iconColor\n              })],\n              children: category\n            }), _jsx(View, {\n              style: [styles.categoryIcon, selectedCategory === category && _objectSpread(_objectSpread({}, styles.categoryIconSelected), {}, {\n                shadowColor: '#ffd128'\n              })],\n              children: _jsx(FontAwesome5, {\n                name: iconName,\n                size: 30,\n                color: iconColor\n              })\n            })]\n          }, category);\n        })\n      }), isLoading ? _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#fff\"\n      }) : _jsx(ScrollView, {\n        children: selectedCategory === 'TODOS' ? categories.filter(function (category) {\n          return category !== 'TODOS';\n        }).map(function (category) {\n          var iconColor = categoriesColor[categories.indexOf(category)];\n          var _labelColor = categoriesIconColor[categories.indexOf(category)];\n          return graphData[category] ? _jsxs(View, {\n            style: [_objectSpread(_objectSpread({}, styles.chartContainer), {}, {\n              borderBottomColor: iconColor\n            })],\n            children: [_jsx(Text, {\n              style: {\n                textAlign: 'center',\n                color: iconColor,\n                fontWeight: 'bold',\n                fontSize: 20\n              },\n              children: category\n            }), _jsx(BarChart, {\n              data: getChartData(graphData[category], category),\n              width: screenWidth,\n              height: 220,\n              chartConfig: _objectSpread(_objectSpread({}, chartConfig), {}, {\n                color: function color() {\n                  return iconColor;\n                },\n                labelColor: function labelColor() {\n                  return _labelColor;\n                }\n              }),\n              fromZero: true\n            })]\n          }, category) : null;\n        }) : graphData[selectedCategory] && _jsx(View, {\n          style: [_objectSpread(_objectSpread({}, styles.chartContainer), {}, {\n            borderBottomColor: categoriesIconColor[categories.indexOf(selectedCategory)]\n          })],\n          children: _jsx(BarChart, {\n            data: getChartData(graphData[selectedCategory], selectedCategory),\n            width: screenWidth,\n            height: 220,\n            chartConfig: _objectSpread(_objectSpread({}, chartConfig), {}, {\n              color: function color() {\n                return categoriesIconColor[categories.indexOf(selectedCategory)];\n              },\n              labelColor: function labelColor() {\n                return categoriesIconColor[categories.indexOf(selectedCategory)];\n              }\n            }),\n            fromZero: true\n          })\n        })\n      })]\n    })\n  });\n};\nexport default GraphicScreen;","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","SafeAreaView","View","Text","TouchableOpacity","ImageBackground","ScrollView","Dimensions","ActivityIndicator","PanResponder","Animated","BarChart","styles","AsyncStorage","BackButton","ThemeContext","FontAwesome5","Menu","jsx","_jsx","jsxs","_jsxs","screenWidth","get","width","categories","categoriesIcon","categoriesIconColor","categoriesColor","GraphicScreen","_ref","navigation","_useState","_useState2","_slicedToArray","selectedCategory","setSelectedCategory","_useState3","_useState4","graphData","setGraphData","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","error","setError","fetchDataForSensor","_ref2","_asyncToGenerator","sensorType","arguments","length","undefined","userToken","getItem","Error","headers","Authorization","endpoint","global","ipDireccion","adminDevicesResponse","fetch","method","adminDevicesData","json","ok","message","deviceId","_id","mappedSensorType","toUpperCase","endpoint2","sensorDataResponse","sensorData","prevData","_objectSpread","_defineProperty","console","apply","forEach","category","handleCategorySelect","getChartData","values","map","item","value","distance","temperature","humidity","labels","Date","timestamp","toLocaleTimeString","datasets","data","legend","chartConfig","backgroundGradientFrom","theme","backgroundGradientTo","decimalPlaces","barPercentage","color","opacity","labelColor","propsForLabels","rotation","fontSize","formatXLabel","label","index","interval","_useContext","dark","light","_useState9","_useState10","menuVisible","setMenuVisible","menuPosition","ValueXY","current","panResponder","create","onStartShouldSetPanResponder","onPanResponderMove","event","gesture","setValue","x","dx","y","dy","onPanResponderRelease","spring","toValue","useNativeDriver","start","style","backgroundImage","container","children","source","require","headerContainer","panHandlers","headerTitle","getLayout","onClose","isVisible","horizontal","showsHorizontalScrollIndicator","contentContainerStyle","categoriesContainer","iconName","indexOf","iconColor","onPress","categoryButton","categoryButtonSelected","borderBottomColor","categoryButtonText","categoryButtonTextSelected","categoryIcon","categoryIconSelected","shadowColor","name","size","filter","chartContainer","textAlign","fontWeight","height","fromZero"],"sources":["C:/Users/lofli/Downloads/integradora-misto/views/graphics/graphicsScreen.js"],"sourcesContent":["import React, { useState, useEffect,useContext,useRef } from 'react';\nimport { SafeAreaView, View, Text, TouchableOpacity, ImageBackground, ScrollView, Dimensions, ActivityIndicator, PanResponder,Animated } from 'react-native';\nimport { BarChart } from 'react-native-chart-kit'; // Importar BarChart de react-native-chart-kit\nimport styles from './graphicsScreen.styles';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport BackButton from '../../components/backButtonc';\nimport { ThemeContext } from \"../../components/theme/themeManager\";\nimport FontAwesome5 from 'react-native-vector-icons/FontAwesome5';\nimport Menu from '../../components/menu/menu';\n\nconst screenWidth = Dimensions.get(\"window\").width; // Obtener el ancho de la pantalla para el gráfico\n\nconst categories = ['TODOS', 'GAS', 'ULTRASONICO', 'TEMPERATURA', 'HUMEDAD'];\nconst categoriesIcon = ['layer-group','cloud', 'wave-square', 'temperature-high', 'water'];\nconst categoriesIconColor = ['#DE784E','#A8A6AC', '#ffd128', '#FF5AA0', '#34c1fd'];\nconst categoriesColor = ['#a85c3d','#A8A6AC', '#bca91e', '#b03d6f', '#1f8cbf'];\n\nconst GraphicScreen = ({ navigation }) => {\n  const [selectedCategory, setSelectedCategory] = useState('TODOS');\n  const [graphData, setGraphData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchDataForSensor = async (sensorType = 'TODOS') => {\n      setIsLoading(true);\n      setError('');\n      try {\n        const userToken = await AsyncStorage.getItem('userToken');\n        if (!userToken) {\n          throw new Error('User token not available');\n        }\n        const headers = { Authorization: `Bearer ${userToken}` };\n\n        const endpoint = `http://${global.ipDireccion}:3000/api/devices/byAdmin`;\n        const adminDevicesResponse = await fetch(endpoint, {\n          method: 'GET',\n          headers,\n        });\n\n        const adminDevicesData = await adminDevicesResponse.json();\n        if (!adminDevicesResponse.ok) {\n          throw new Error(adminDevicesData.message || 'Failed to fetch devices');\n        }\n\n        if (adminDevicesData && adminDevicesData.length > 0) {\n          const deviceId = adminDevicesData[0]._id;\n\n          let mappedSensorType = '';\n          switch(sensorType.toUpperCase()) {\n              case 'GAS': mappedSensorType = 'gasDetector'; break;\n              //case 'GAS': mappedSensorType = 'gasDetector'; console.log(mappedSensorType); break;\n              case 'ULTRASONICO': mappedSensorType = 'ultrasonic'; break;\n              case 'TEMPERATURA': mappedSensorType = 'temperature'; break;\n              case 'HUMEDAD': mappedSensorType = 'humidity'; break;\n              default: throw new Error('Tipo de sensor no reconocido: ' + sensorType);\n          }\n\n          const endpoint2 = `http://${global.ipDireccion}:3000/api/devices/${deviceId}/sensors/${mappedSensorType}/data`;\n          //console.log(endpoint2)\n          const sensorDataResponse = await fetch(endpoint2, { method: 'GET', headers });\n          const sensorData = await sensorDataResponse.json();\n\n          //console.log(`Data for ${mappedSensorType}: ${sensorData}`)\n\n          if (!sensorDataResponse.ok) {\n            throw new Error(sensorData.message || `Failed to fetch data for sensor: ${sensorType}`);            \n          }\n\n          if (sensorData && sensorData.length > 0) {\n            //console.log(sensorData)\n            setGraphData(prevData => ({\n              ...prevData,\n              [sensorType]: sensorData\n            }));\n          } else {\n            throw new Error(`No data found for sensor: ${sensorType}`);\n          }\n        } else {\n          throw new Error('No devices found for this admin');\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    \n    if (selectedCategory === 'TODOS') {\n      global.categories.forEach(category => {\n        fetchDataForSensor(category);\n      });\n    } else {\n      fetchDataForSensor(selectedCategory);\n    }\n  }, [selectedCategory]);\n\n    const handleCategorySelect = (category) => {\n        setSelectedCategory(category);\n      };\n     \n      const getChartData = (sensorData, sensorType) => {\n        // Crear un arreglo de valores basado en el tipo de sensor\n        let values;\n        switch(sensorType) {\n          case 'GAS':\n            values = sensorData.map(item => item.value);\n            break;\n          case 'ULTRASONICO':\n            values = sensorData.map(item => item.distance);\n            break;\n          case 'TEMPERATURA':\n            values = sensorData.map(item => item.temperature);\n            break;\n          case 'HUMEDAD':\n            values = sensorData.map(item => item.humidity);\n            break;\n          default:\n            values = [];\n        }\n        return {\n          labels: sensorData ? sensorData.map(item => new Date(item.timestamp).toLocaleTimeString()) : [],\n          datasets: [{\n            data: values,\n          }],\n          legend: [\"Sensor Data\"] // Esto es opcional\n        };\n      };\n      \n      const chartConfig = {\n        backgroundGradientFrom: theme === 'light' ? \"#F7F6FA\" : \"#202124\",\n        backgroundGradientTo: theme === 'light' ? \"#F7F6FA\" : \"#202124\",\n        decimalPlaces: 2,\n        barPercentage: 0.5,\n        color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // Color del texto\n        labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // Color del texto\n        propsForLabels: { rotation: '0',fontSize: \"14\",},\n        formatXLabel: (label, index, labels) => {\n          const interval = 1;\n          return index % interval === 0 ? label : '';\n        },\n        \n      };\n      \n      const { theme } = useContext(ThemeContext);\n      const dark ='../../assets/images/tile_background4.png';\n      const light ='../../assets/images/tile_background9.png';\n\n      const [menuVisible, setMenuVisible] = useState(false);\n  \n      const menuPosition = useRef(new Animated.ValueXY()).current;\n    \n      const panResponder = useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderMove: (event, gesture) => {\n            menuPosition.setValue({ x: gesture.dx, y: gesture.dy });\n          },\n          \n          onPanResponderRelease: (event, gesture) => {\n            if (gesture.dx > 50) {\n              setMenuVisible(true);\n            } else {\n              setMenuVisible(false);\n            }\n            Animated.spring(menuPosition, {\n              toValue: { x: 0, y: 0 },\n              useNativeDriver: false,\n            }).start();\n          },\n        })\n      ).current;\n\n    return (\n      <SafeAreaView style={{...(styles.backgroundImage),...(styles.container)}}>\n        <ImageBackground source={theme === 'light' ? require(light) : require(dark)} \n             style={{...(styles.backgroundImage),...(styles.container)}}\n      >  \n        <View style={styles.headerContainer} {...panResponder.panHandlers}>\n          <View style={styles.headerContainer}>\n            <Text style={styles.headerTitle}>Gráficas de Sensores</Text>\n          </View>\n          <BackButton navigation={navigation}/>\n        </View>\n        {menuVisible && (<Menu navigation={navigation} style={menuPosition.getLayout()}  onClose={(isVisible) => setMenuVisible(isVisible)}/>)} \n\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={styles.categoriesContainer}>\n        {categories.map((category) => {\n        const iconName = categoriesIcon[categories.indexOf(category)];\n        const iconColor = categoriesIconColor[categories.indexOf(category)];\n\n        return (\n          <TouchableOpacity key={category} onPress={() => handleCategorySelect(category)}\n            style={[styles.categoryButton, selectedCategory === category && \n            {...styles.categoryButtonSelected, borderBottomColor: iconColor}]}\n            >\n            <Text \n            style={[styles.categoryButtonText, selectedCategory === category && {...styles.categoryButtonTextSelected, color: iconColor}]}\n            >\n              {category}\n            </Text>\n            <View \n            style={[styles.categoryIcon, selectedCategory === category && {...styles.categoryIconSelected, shadowColor: '#ffd128' }]}\n            > \n              <FontAwesome5 name={iconName} size={30} color={iconColor} />\n            </View>\n        </TouchableOpacity>\n          );\n        })}\n        </ScrollView>\n  \n        {isLoading ? (\n          <ActivityIndicator size=\"large\" color=\"#fff\" />\n        ) : (\n          <ScrollView >\n  {selectedCategory === 'TODOS' ? (\n    categories.filter(category => category !== 'TODOS').map((category) => {\n      const iconColor = categoriesColor[categories.indexOf(category)];\n      const labelColor = categoriesIconColor[categories.indexOf(category)];\n      return graphData[category] ? (\n        <View key={category} style={[{...styles.chartContainer, borderBottomColor: iconColor}]}>\n          <Text style={{ textAlign: 'center',color:iconColor,fontWeight:'bold',fontSize:20 }}>{category}</Text>\n          <BarChart\n            data={getChartData(graphData[category], category)} // Asegúrate de pasar category aquí\n            width={screenWidth}\n            height={220}\n            chartConfig={{ ...chartConfig,\n              color: () => iconColor,\n              labelColor: () => labelColor,\n            }}\n            fromZero={true}\n          />\n        </View>\n      ) : null;\n    })\n  ) : \n  (\n    \n\n   graphData[selectedCategory] && (\n      <View style={[{...styles.chartContainer, borderBottomColor: categoriesIconColor[categories.indexOf(selectedCategory)]}]}>\n        <BarChart\n          data={getChartData(graphData[selectedCategory], selectedCategory)}\n          width={screenWidth}\n          height={220}\n          chartConfig={{\n            ...chartConfig,\n            color: () => categoriesIconColor[categories.indexOf(selectedCategory)],\n            labelColor: () => categoriesIconColor[categories.indexOf(selectedCategory)],\n          }}\n          fromZero={true}\n        />\n      </View>\n    )\n  )}\n</ScrollView>\n\n        )}\n      </ImageBackground>\n      </SafeAreaView>\n    );\n  };\n\n/* const OfferCard = ({ type, value, alertType }) => {\n  return(\n    <Text style={styles.categoryButtonText}>{category}</Text>\n  );\n}; */\n\nexport default GraphicScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}