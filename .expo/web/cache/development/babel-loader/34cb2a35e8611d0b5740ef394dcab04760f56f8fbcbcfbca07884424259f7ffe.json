{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Slider from '@react-native-community/slider';\nimport { Picker } from '@react-native-picker/picker';\nimport styles from \"./dashboardScreen.styles\";\nimport { Client, Message } from 'paho-mqtt';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DashboardScreen = function DashboardScreen() {\n  var _useState = useState('d'),\n    _useState2 = _slicedToArray(_useState, 2),\n    direction = _useState2[0],\n    setDirection = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    stepsValue = _useState4[0],\n    setStepsValue = _useState4[1];\n  var _useState5 = useState(0.0001),\n    _useState6 = _slicedToArray(_useState5, 2),\n    speedValue = _useState6[0],\n    setSpeedValue = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    client = _useState8[0],\n    setClient = _useState8[1];\n  useEffect(function () {\n    var clientId = 'clientId_' + Math.random().toString(16).slice(2, 8);\n    var newClient = new Client('test.mosquitto', 1883, clientId);\n    var options = {\n      useSSL: false,\n      onSuccess: function onSuccess() {\n        console.log('Conectado a MQTT');\n      },\n      onFailure: function onFailure(error) {\n        console.log('Conexión fallida:', error);\n      }\n    };\n    newClient.connect(options);\n    setClient(newClient);\n    return function () {\n      if (client) {\n        client.disconnect();\n      }\n    };\n  }, []);\n  var sendAllMessages = function sendAllMessages() {\n    sendMessage('direccion', direction);\n    sendMessage('pasos', stepsValue.toString());\n    sendMessage('velocidad', speedValue.toFixed(4));\n  };\n  var sendMessage = function sendMessage(category, value) {\n    if (client) {\n      var topic = `/chava/${category}`;\n      var message = new Message(value);\n      message.destinationName = topic;\n      client.send(message);\n      console.log(`Enviando mensaje a MQTT: ${value}`);\n      console.log(`Topic: ${message.destinationName}`);\n    }\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.safeArea,\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\"\n    }), _jsxs(Picker, {\n      selectedValue: direction,\n      onValueChange: setDirection,\n      style: {\n        width: '100%',\n        height: 50\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Derecha\",\n        value: \"d\"\n      }), _jsx(Picker.Item, {\n        label: \"Izquierda\",\n        value: \"i\"\n      })]\n    }), _jsx(Slider, {\n      style: {\n        width: '100%',\n        height: 40\n      },\n      minimumValue: 0,\n      maximumValue: 10000,\n      step: 1,\n      value: stepsValue,\n      onValueChange: setStepsValue\n    }), _jsx(Slider, {\n      style: {\n        width: '100%',\n        height: 40\n      },\n      minimumValue: 0.0001,\n      maximumValue: 0.0099,\n      step: 0.0001,\n      value: speedValue,\n      onValueChange: setSpeedValue\n    }), _jsx(TouchableOpacity, {\n      style: styles.sendButton,\n      onPress: sendAllMessages,\n      children: _jsx(Text, {\n        style: styles.sendButtonText,\n        children: \"Enviar Todo\"\n      })\n    })]\n  });\n};\nexport default DashboardScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","SafeAreaView","TouchableOpacity","StatusBar","Slider","Picker","styles","Client","Message","jsx","_jsx","jsxs","_jsxs","DashboardScreen","_useState","_useState2","_slicedToArray","direction","setDirection","_useState3","_useState4","stepsValue","setStepsValue","_useState5","_useState6","speedValue","setSpeedValue","_useState7","_useState8","client","setClient","clientId","Math","random","toString","slice","newClient","options","useSSL","onSuccess","console","log","onFailure","error","connect","disconnect","sendAllMessages","sendMessage","toFixed","category","value","topic","message","destinationName","send","style","safeArea","children","barStyle","selectedValue","onValueChange","width","height","Item","label","minimumValue","maximumValue","step","sendButton","onPress","sendButtonText"],"sources":["C:/Users/lofli/Downloads/integradora-misto/views/dashboard/dashBoardScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, SafeAreaView, TouchableOpacity, StatusBar } from 'react-native';\nimport Slider from '@react-native-community/slider';\nimport { Picker } from '@react-native-picker/picker';\nimport styles from './dashboardScreen.styles';\nimport { Client, Message } from 'paho-mqtt';\n\nconst DashboardScreen = () => {\n    const [direction, setDirection] = useState('d'); // Estado inicial para la dirección\n    const [stepsValue, setStepsValue] = useState(0); // Estado inicial para los pasos\n    const [speedValue, setSpeedValue] = useState(0.0001); // Estado inicial para la velocidad\n    const [client, setClient] = useState(null);\n\n    useEffect(() => {\n        const clientId = 'clientId_' + Math.random().toString(16).slice(2, 8);\n        const newClient = new Client('test.mosquitto', 1883, clientId);\n\n        const options = {\n            useSSL: false,\n            onSuccess: () => {\n                console.log('Conectado a MQTT');\n            },\n            onFailure: (error) => {\n                console.log('Conexión fallida:', error);\n            },\n        };\n        newClient.connect(options);\n        setClient(newClient);\n\n        return () => {\n            if (client) {\n                client.disconnect();\n            }\n        };\n    }, []);\n\n    const sendAllMessages = () => {\n        sendMessage('direccion', direction);\n        sendMessage('pasos', stepsValue.toString());\n        sendMessage('velocidad', speedValue.toFixed(4));\n    };\n\n    const sendMessage = (category, value) => {\n        if (client) {\n            const topic = `/chava/${category}`;\n            const message = new Message(value);\n            message.destinationName = topic;\n            client.send(message);\n            console.log(`Enviando mensaje a MQTT: ${value}`);\n            console.log(`Topic: ${message.destinationName}`);\n        }\n    };\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <StatusBar barStyle=\"dark-content\" />\n            <Picker\n                selectedValue={direction}\n                onValueChange={setDirection}\n                style={{width: '100%', height: 50}}>\n                <Picker.Item label=\"Derecha\" value=\"d\" />\n                <Picker.Item label=\"Izquierda\" value=\"i\" />\n            </Picker>\n            <Slider\n                style={{width: '100%', height: 40}}\n                minimumValue={0}\n                maximumValue={10000}\n                step={1}\n                value={stepsValue}\n                onValueChange={setStepsValue}\n            />\n            <Slider\n                style={{width: '100%', height: 40}}\n                minimumValue={0.0001}\n                maximumValue={0.0099}\n                step={0.0001}\n                value={speedValue}\n                onValueChange={setSpeedValue}\n            />\n            <TouchableOpacity\n                style={styles.sendButton}\n                onPress={sendAllMessages}>\n                <Text style={styles.sendButtonText}>Enviar Todo</Text>\n            </TouchableOpacity>\n        </SafeAreaView>\n    );\n};\n\nexport default DashboardScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}